#+SETUPFILE: Setup/setupFile.org
#+TITLE: Journal
* 2020
** 2020-03 March
*** 2020-03-19 Thursday

****  =transform=, =map= design error                                    :Design:

   Refactoring of =transform=, =map=...

#+BEGIN_SRC cpp :eval never
template <typename IMPL, typename LAMBDA>
void
transform_indexed(Dense_Matrix_Crtp<IMPL>& matrix, const LAMBDA& lambda)
{
  ...
}
#+END_SRC

to 

#+BEGIN_SRC cpp :eval never
template <typename LAMBDA, typename... IMPL>
void
transform_indexed(const LAMBDA& lambda, Dense_Matrix_Crtp<IMPL>& matrix...)
{
  ...
}
#+END_SRC

Reason: having several =IMPL...= allow us to chose the one that have static size

**** Usage example

To compute
$$
v_0=v_0 + v_1
$$

with $v_1$ *static* size and $v_0$ *dynamic* size.

*Before:*

#+BEGIN_SRC cpp :eval never
transform_indexed(v_0,[&v_1](const auto& v_0_i,const size_t i){ return v_0_i + v_1[i]; });
#+END_SRC

Problem -> the loop is performed using $v_0$'s dynamic size

*After:*

#+BEGIN_SRC cpp :eval never
transform(v_0,v_1,[](const auto& v_0_i,const auto v_1_i){ return v_0_i + v_1_i; });
#+END_SRC

-> all the burden of testing/choosing the static size value is
   encapsulated into the =transform= procedure & static size is chosen.
