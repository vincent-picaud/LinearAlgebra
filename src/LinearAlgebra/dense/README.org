#+Call: Setup()
#+Call: HomeUp()
#+Title: =LinearAlgebra/dense/= 

* Role

This directory contains dense vector/matrix containers. It uses crtp.

The genericity is obtained by using a *design by policies* to define:
- storage scheme: static size, etc...
- memory_chunk_type: std::vector, pointer etc..

The vector classes illustrate this (but the same schem is used for matrix etc...):

#+begin_src cpp :eval never
template <typename IMPL>
class Default_Vector_Crtp : public Crtp_Find_Impl<Default_Vector_Crtp, IMPL, Vector_Crtp>
{
  ///////////
  // Types //
  ///////////
  //
 public:
  using base_type = Crtp_Find_Impl<Default_Vector_Crtp, IMPL, Vector_Crtp>;

  using exact_type  = typename base_type::exact_type;
  using traits_type = typename base_type::traits_type;

  // Note: take habit to put storage first, as it can be used to
  // compute required_capacity needed by memory_chunk
  using storage_scheme_type = typename traits_type::storage_scheme_type;
  using memory_chunk_type   = typename traits_type::memory_chunk_type;

  /////////////
  // Members //
  /////////////
  //
 protected:
  storage_scheme_type _storage_scheme;
  memory_chunk_type _memory_chunk;
}
#+end_src

The policies are define thanks to Crtp_Type_Traits:

#+begin_src cpp :eval never
template <typename T, typename N_TYPE, typename INCREMENT>
struct Crtp_Type_Traits<LinearAlgebra::Default_Vector<T, N_TYPE, INCREMENT>>
{
  using storage_scheme_type = LinearAlgebra::Default_Vector_Storage_Scheme<N_TYPE, INCREMENT>;
  using memory_chunk_type =
      LinearAlgebra::Default_Memory_Chunk<T, typename storage_scheme_type::required_capacity_type>;
  // ...
};
#+end_src

See:
- [[file:vector_storage_scheme.hpp][file:vector_storage_scheme.hpp]]
- [[file:matrix_storage_scheme.hpp][file:matrix_storage_scheme.hpp]]
- [[file:memory_chunk.hpp][file:memory_chunk.hpp]]

** Vector classes
   :PROPERTIES:
   :ID:       37ca8895-814e-4808-882f-fff1bde88bcc
   :END:
#+INDEX: Vector!Vector_Hierarchy

 The hierachy is as follows:

   #+begin_src plantuml :file ./figures/vector_hierarchy.png :eval no-export
interface Vector_Crtp
interface Default_Vector_Crtp

class Default_Vector
class Tiny_Vector<E,N>
class Vector<E>

class Default_Vector_View
class Tiny_Vector_View<E,N>
class Vector_View<E>

class Default_Vector_Const_View
class Tiny_Vector_Const_View<E,N>
class Vector_Const_View<E>

Vector_Crtp <|--- Default_Vector_Crtp
Default_Vector_Crtp  <|--- Default_Vector
Default_Vector  <|--- Tiny_Vector
Default_Vector  <|--- Vector

Default_Vector_Crtp  <|--- Default_Vector_View
Default_Vector_View  <|--- Tiny_Vector_View 
Default_Vector_View  <|--- Vector_View 

Default_Vector_Crtp  <|--- Default_Vector_Const_View
Default_Vector_Const_View  <|--- Tiny_Vector_Const_View 
Default_Vector_Const_View  <|--- Vector_Const_View 

class Vector_Crtp {
	.. Methods ..
	size size() const
	const this& as_const() const
}

class Default_Vector_Crtp {
	.. Methods ..
	E* data() 
	const E* data() const

	inc increment() const
	const storage_scheme_type& storage_scheme() const 

	E& operator[i]
	const E& operator[i] const

	void map(lambda) const/mutable
	void map_indexed(lambda) const/mutable
}

class Default_Vector {
	.. Constructors ..
	()
	(size,increment)
	(size)
}

class Default_Vector_View {
	.. Constructors ..
	(E* data)
	(E* data,size,inc)  
}

class Default_Vector_Const_View {
	.. Constructors ..
	(const E* data)
	(const E* data,size,inc)  
}

   #+End_src


   #+RESULTS:
   [[file:./figures/vector_hierarchy.png]]

** TODO Matrix classes 
#+INDEX: Matrix!Matrix_Hierarchy

Must follow the same scheme as [[id:37ca8895-814e-4808-882f-fff1bde88bcc][Vector classes]].

* Other important files

| matrix_crtp_fwd.hpp               |                                      |
| matrix_crtp.hpp                   |                                      |
| matrix.hpp                        |                                      |
| matrix_special_structure_enum.hpp | define Matrix_Special_Structure_Enum |
| matrix_storage_scheme.hpp         | [[id:7caa1815-a2a9-42d2-96c5-c6ed8385ac76][loop_over_indices]]                    |
| memory_chunk.hpp                  |                                      |
| vector_crtp_fwd.hpp               |                                      |
| vector_crtp.hpp                   |                                      |
| vector_crtp_size_utils.hpp        | define [[id:32e3648d-7757-47a8-b934-f640c47b4dc0][=get_size()=]]                  |
| vector.hpp                        |                                      |
| vector_storage_scheme.hpp         |                                      |


** get_size()
   :PROPERTIES:
   :ID:       32e3648d-7757-47a8-b934-f640c47b4dc0
   :END:
#+INDEX: Vector!get_size()

Do not forget this function exist!


** loop_over_indices                                            :Performance:
   :PROPERTIES:
   :ID:       7caa1815-a2a9-42d2-96c5-c6ed8385ac76
   :END:

Important as use by maps function 



