#+TITLE: Reminder & TODO list

* Things todo [2/3]


  - Note taken on [2020-04-19 Sun 11:29] \\
    Add as_view(), similar to as_generic_view()
  - Note taken on [2020-04-19 Sun 11:24] \\
    [ ] IMPORTANT ad AD support (in peculiar simplification removing α
    when α==1 is a bad practice if α is AutoDiff. One must introduce special function like
    
       allowed_simplification(α,value)
    
    that returns false whenever α type is an AutoDiff type
    
    Concrete example: even if α == 1 you cannot simplify f=α.β by f=β as
    
    \partial_α f = β in one case and \partial_α f = 0 (wrong) in the "simplified" case.
  - Note taken on [2020-04-17 Fri 18:58] \\
    [ ] check include problematic (in CG)
    #+BEGIN_SRC cpp :eval never
    #include "LinearAlgebra/dense/matrix_fwd.hpp"
    #+END_SRC
  - [X] Note taken on [2020-04-17 Fri 00:02] \\
    - URGENT!
      - [X] add as_generic_view() + as_view() dans vector, teste si ok, pui dans matrice
      - [X] remove create_generic_view file
      - [X] test with optimization
  - [ ] Note taken on [2020-04-16 Thu 16:09] \\
    Fix $X=Y-Z$ which is currently not available
  - [X] Note taken on [2020-04-15 Wed 17:06] \\
    Check the todo list works!

* Some Reminders

  - Note taken on [2020-04-15 Wed 22:04] \\
    I just fixed a *bug* by replacing:
    
    #+BEGIN_SRC cpp
    Common_Element_Type_t<V0_IMPL, V1_IMPL> sum{};  // <--
    
    if constexpr (Is_Complex_v<Element_Type_t<V0_IMPL>>)
    {
      scan([&sum](const auto& v0_component,
                  const auto& v1_component) { sum += conjugate(v0_component) * v1_component; },
           V0, V1);
    }
    #+END_SRC
    
    by
    
    #+BEGIN_SRC cpp
    Common_Element_Type_t<V0_IMPL, V1_IMPL> sum;  // <--
    sum = 0;                                      // <--
    
    if constexpr (Is_Complex_v<Element_Type_t<V0_IMPL>>)
    {
      scan([&sum](const auto& v0_component,
                  const auto& v1_component) { sum += conjugate(v0_component) * v1_component; },
           V0, V1);
    }
    #+END_SRC
    
    *This is the right way to do.*

    Explanation
    
    When the type is =double=, =int=, =sum{}= is okay. However when the =sum= type
    is =AD<T>= (autodiff) or another vector/matrix the one must proceed in
    two step: =sum;= which is the default constructor that does a minimal
    work, *then* fill it with zero by =sum=0=.

  - Note taken on [2020-04-15 Wed 16:33] \\
    Begin,End versus Begin,Size convention:
    
    #+BEGIN_EXAMPLE
         CAVEAT: for views our convention is *always* to use [begin,end[ and NOT (begin,size)
                 by example view(2,4) mean {v_2,v_3}, begin=2, end=4 (and NOT {v_2,v_3,v_4,v_5}, begin=2, size=4)) 
    #+END_EXAMPLE

  - Note taken on [2020-04-15 Wed 16:31] \\
    Comparison operators, one bug to clarify:
    
    #+BEGIN_EXAMPLE
    
    CAVEAT: DO NOT DEFINE >= AS !< (FOR ARRAY).                               
                                                                         
    Reason: if you do so you will have:                                          
       (1)  (1,1) <  (1,1)  FALSE                                             
            but, if >= is !<                                                  
       (2)  (1,0) >= (1,1) TRUE <- which is NOT what we expect                
                                                                              
       (1)  (a0 < b0) and (a1 < b1)                                           
    but !(1) is                                                               
       (2)  (a0 >= b0) or (a1 >= b1) (but we want (a0 >= b0) _AND_ (a1 >= b1))
                                                                              
    #+END_EXAMPLE

  - Note taken on [2020-04-15 Wed 16:29] \\
    ADL example
    
    #+BEGIN_SRC cpp :eval never
namespace LinearAlgebra
{
  namespace Detail
  {
    struct Detail_ADL
    {
    };
    
    template <typename IMPL_0, typename IMPL_1>
    bool
    impl_comparison(const Detail_ADL detail_ADL, const Vector_Crtp<IMPL_0>& vector_0,
    		    const Vector_Crtp<IMPL_1>& vector_1)
    {
      return impl_comparison(detail_ADL, vector_0.impl(), vector_1.impl());
    }
  }
    
  template <typename IMPL_0, typename IMPL_1>
  bool
  operator==(const Vector_Crtp<IMPL_0>& vector_0, const Vector_Crtp<IMPL_1>& vector_1)
  {
    return impl_comparison(Detail::Detail_ADL(), vector_0, vector_1);
  }
    
  namespace Detail
  {
    template <typename IMPL_0, typename IMPL_1>
    bool
    impl_comparison(const Detail_ADL detail_ADL, const Dense_Vector_Crtp<IMPL_0>& vector_0,
    		    const Dense_Vector_Crtp<IMPL_1>& vector_1)
    {
      return true;
    }
  }
}
    #+END_SRC
    
    Archived, for the moment we do not systematically use this kind of stuff

  - Note taken on [2020-04-15 Wed 16:29] \\
    To prevent object slicing it is important to define this kind of stuff
    
    #+BEGIN_SRC cpp :eval never
template <typename IMPL>
class Dense_Vector_Crtp
{
protected: // <- CAVEAT
  Dense_Vector_Crtp()                         = default;
  Dense_Vector_Crtp(const Dense_Vector_Crtp&) = default;
  Dense_Vector_Crtp(Dense_Vector_Crtp&) = default;
  Dense_Vector_Crtp& operator=(const Dense_Vector_Crtp&) = default;
  Dense_Vector_Crtp& operator=(Dense_Vector_Crtp&) = default;
};
    #+END_SRC

* Meson & external dependency (here slate/blaspp)

  Two solutions:
  - suproject
  - external dependency

** subproject 

   This worked, but certainly need some cleaning

*** =/meson.build=
    #+BEGIN_EXAMPLE
project('LinearAlgebra', 'cpp',
	version : '0.0.1',
	default_options : ['cpp_std=c++17'])

gtest_proj = subproject('gtest')
gtest_dep = gtest_proj.get_variable('gtest_main_dep')

################
# Slate Blaspp #
################
#
cmake = import('cmake')

# note: you can add cmake options here:
#       cmake.subproject('blaspp', cmake_options: '-DSOME_CMAKE_VAR=something')
# todo: add NDEBUG etc for release 
blaspp_proj = cmake.subproject('blaspp')
# Note: you have to search CMakeList.txt add_library(...)
#       to find the right library name 'blaspp' in .dependency('blaspp')
#
# Meson doc:
# https://github.com/mesonbuild/meson/tree/36749a1625534386c1adefcd8ced5b45144501d1/test%20cases/cmake
blaspp_dep = blaspp_proj.dependency('blaspp')
install_headers(blaspp_proj.include_directories('blaspp')) # 'subprojects/blaspp/include')

subdir('src')
subdir('test')
subdir('bin')
subdir('sandbox')
subdir('examples')
    #+END_EXAMPLE

*** =/src/LinerarAlgebra/meson.build=
    #+BEGIN_EXAMPLE
LinearAlgebra_headers = [ ... ]
LinearAlgebra_sources = [ ... ]

subdir('...')

LinearAlgebra_lib = library('LinearAlgebra',
			    include_directories : inc,
			    install : true,
			    sources: [LinearAlgebra_headers,LinearAlgebra_sources])

LinearAlgebra_dep = declare_dependency(include_directories : inc,
				       link_with : [LinearAlgebra_lib,],
				       dependencies : [blas_lib,])         # <-- HERE

install_headers(LinearAlgebra_headers, subdir : 'LinearAlgebra')
    #+END_EXAMPLE

*** =/subproject/blaspp.wrap=

    #+BEGIN_EXAMPLE
# See: https://github.com/mesonbuild/meson/tree/master/manual%20tests/6%20hg%20wrap

[wrap-hg]
directory=blaspp
url=https://bitbucket.org/icl/blaspp
revision=tip
    #+END_EXAMPLE

*** =/examples/meson.build=

    #+BEGIN_EXAMPLE
#include "blas.hh"

#include <iostream>

// The 3x2 matrix, column major
// { 1, 2 }
// { 3, 4 }
// { 5, 6 }
double M_32[6] = {1, 3, 5, 2, 4, 6};

int main()
{
  std::cout << "\n\n norm " << blas::nrm2(6,M_32,1);
}
    #+END_EXAMPLE

    #+BEGIN_EXAMPLE
executable('blaspp_example',
	   'blaspp_example.cpp',
	   dependencies : [LinearAlgebra_dep, blaspp_dep])
    #+END_EXAMPLE

** External dependency

   This worked, but certainly need some cleaning.

   This library depends on 
   - [[https://bitbucket.org/icl/blaspp/src/default/][slate/blaspp]] 
   - [[https://bitbucket.org/icl/lapackpp/src/default/][slate/lapackpp]]

   To install =lapackpp= (without the tests)
   #+BEGIN_SRC sh :eval never
hg clone https://bitbucket.org/icl/lapackpp
mkdir build
cd build/
cmake -DBUILD_LAPACKPP_TESTS=false ..
make
make install 
   #+END_SRC

   TODO: how to install optimized version. To check: one has to define:
   - for =blaspp= =-DBLAS_ERROR_NDEBUG= (used in =blas_util.hh=)
   - for =lapackpp= =-DLAPACK_ERROR_NDEBUG= (used in =lapack_util.hh=)

   The default install directory of =blaspp= and =lapackpp= is
   =/opt/slate/=. This is the directory used by the meson script.  You can
   always modify these paths in the root meson.build file (in
   =LinearAlgebra/meson.build=). By example:
   #+BEGIN_SRC meson :eval never
#
# blaspp
#
blaspp_lib = 'blaspp'
blaspp_lib_dir = '/opt/slate/lib'         # <- modify me
blaspp_header_dir = '/opt/slate/include'  # <- modify me
   #+END_SRC


*** =/meson.build/=

    #+BEGIN_EXAMPLE
project('LinearAlgebra', 'cpp',
	version : '0.0.1',
	default_options : ['cpp_std=c++17'])

gtest_proj = subproject('gtest')
gtest_dep = gtest_proj.get_variable('gtest_main_dep')

#
# blaspp
#
blaspp_lib = 'blaspp'
blaspp_lib_dir = '/opt/slate/lib'
blaspp_header_dir = '/opt/slate/include'

blaspp_dep = declare_dependency(link_args : ['-L' + blaspp_lib_dir, '-l' + blaspp_lib],
 				include_directories : include_directories(blaspp_header_dir))

subdir('src')
subdir('test')
subdir('bin')
subdir('sandbox')
subdir('examples')
    #+END_EXAMPLE

*** =/src/LinearAlgebra/meson.build=

    #+BEGIN_EXAMPLE
LinearAlgebra_headers = [...]
LinearAlgebra_sources = [...]

subdir(...)

LinearAlgebra_lib = library('LinearAlgebra',
			    include_directories : inc,
			    install : true,
			    sources: [LinearAlgebra_headers,LinearAlgebra_sources])

LinearAlgebra_dep = declare_dependency(include_directories : inc,
				       link_with : [LinearAlgebra_lib,],
				       dependencies : [blas_lib,blaspp_dep])  # <--- HERE

install_headers(LinearAlgebra_headers, subdir : 'LinearAlgebra')
    #+END_EXAMPLE

*** =/example/meson.build=

    #+BEGIN_EXAMPLE
executable('test_blaspp',
	   'test_blaspp.cpp',
	   build_rpath : '/opt/slate/lib',         # <-- CAVEAT
	   install_rpath : '/opt/slate/lib',       # <-- CAVEAT
	   dependencies : [LinearAlgebra_dep, blaspp_dep])
    #+END_EXAMPLE

*** =/subproject/=

    There is nothing related to blas (appart gtest)
